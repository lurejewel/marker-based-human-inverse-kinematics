% 流程：
% 1. 定义所有关节在模型战力状态下的相对位移
% 2. 定义关节的旋转轴、计算方法
% 3. 计算行走状态下的人体模型，并显示
% 4. 定义marker点相对临近关节的位置
% 5. scale
% 6. IK

%% Define Joints of the model

dofs = containers.Map();

% global DOF
dofs('pelvis_tx') = struct('axis', [1 0 0 1]', 'range', [-5 5]', 'defaultValue', 0, 'defaultSpeed', 0);
dofs('pelvis_ty') = struct('axis', [0 1 0 1]', 'range', [-1 2]', 'defaultValue', 0.93, 'defaultSpeed', 0);
dofs('pelvis_tz') = struct('axis', [0 0 1 1]', 'range', [-3 3]', 'defaultValue', 0, 'defaultSpeed', 0);
ground_pelvis = JointDef('translation_parent', [0 0 0]', ...
                         'translation_child', [0 0 0]', ...
                         'Ndof', 3, ...
                         'axis', [dofs('pelvis_tx').axis, dofs('pelvis_ty').axis, dofs('pelvis_tz').axis], ...
                         'range', [dofs('pelvis_tx').range, dofs('pelvis_ty').range, dofs('pelvis_tz').range], ...
                         'defaultValue', [dofs('pelvis_tx').defaultValue, dofs('pelvis_ty').defaultValue, dofs('pelvis_tz').defaultValue], ...
                         'defaultSpeed', [dofs('pelvis_tx').defaultSpeed, dofs('pelvis_ty').defaultSpeed, dofs('pelvis_tz').defaultSpeed]);

% right hip
dofs('hip_flexion_r') = struct('axis', [0 0 1 0]', 'range', deg2rad(120)*[-1 1]', 'defaultValue', 0, 'defaultSpeed', 0);
dofs('hip_adduction_r') = struct('axis', [1 0 9 0]', 'range', deg2rad(120)*[-1 1]', 'defaultValue', 0, 'defaultSpeed', 0);
dofs('hip_rotation_r') = struct('axis', [0 1 0 0]', 'range', deg2rad(120)*[-1 1]', 'defaultValue', 0, 'defaultSpeed', 0);
hip_r = JointDef('translation_parent', [-0.0707 -0.0661 0.0835]', ...
                 'translation_child', [0 0 0]', ...
                 'Ndof', 3, ...
                 'axis', [dofs('hip_flexion_r').axis, dofs('hip_adduction_r').axis, dofs('hip_rotation_r').axis], ...
                 'range', [dofs('hip_flexion_r').range, dofs('hip_adduction_r').range, dofs('hip_rotation_r').range], ...
                 'defaultValue', [dofs('hip_flexion_r').defaultValue, dofs('hip_adduction_r').defaultValue, dofs('hip_rotation_r').defaultValue], ...
                 'defaultSpeed', [dofs('hip_flexion_r').defaultSpeed, dofs('hip_adduction_r').defaultSpeed, dofs('hip_rotation_r').defaultSpeed]);

% left hip
dofs('hip_flexion_l') = struct('axis', [0 0 1 0]', 'range', deg2rad(120)*[-1 1]', 'defaultValue', 0, 'defaultSpeed', 0);
dofs('hip_adduction_l') = struct('axis', [1 0 9 0]', 'range', deg2rad(120)*[-1 1]', 'defaultValue', 0, 'defaultSpeed', 0);
dofs('hip_rotation_l') = struct('axis', [0 1 0 0]', 'range', deg2rad(120)*[-1 1]', 'defaultValue', 0, 'defaultSpeed', 0);
hip_l = JointDef('translation_parent', [-0.0707 -0.0661 -0.0835]', ...
                 'translation_child', [0 0 0]', ...
                 'Ndof', 3, ...
                 'axis', [dofs('hip_flexion_l').axis, dofs('hip_adduction_l').axis, dofs('hip_rotation_l').axis], ...
                 'range', [dofs('hip_flexion_l').range, dofs('hip_adduction_l').range, dofs('hip_rotation_l').range], ...
                 'defaultValue', [dofs('hip_flexion_l').defaultValue, dofs('hip_adduction_l').defaultValue, dofs('hip_rotation_l').defaultValue], ...
                 'defaultSpeed', [dofs('hip_flexion_l').defaultSpeed, dofs('hip_adduction_l').defaultSpeed, dofs('hip_rotation_l').defaultSpeed]);

% right knee
dofs('knee_flexion_r') = struct('axis', [0 0 1 0]', 'range', deg2rad(10)*[-12 1]', 'defaultValue', 0, 'defaultSpeed', 0);
knee_r = JointDef('translation_parent', [0 -0.396 0]', ...
                 'translation_child', [0 0 0]', ...
                 'Ndof', 1, ...
                 'axis', dofs('knee_flexion_r').axis, ...
                 'range', dofs('knee_flexion_r').range, ...
                 'defaultValue', dofs('knee_flexion_r').defaultValue, ...
                 'defaultSpeed', dofs('knee_flexion_r').defaultSpeed);

% left knee
dofs('knee_flexion_l') = struct('axis', [0 0 1 0]', 'range', deg2rad(10)*[-12 1]', 'defaultValue', 0, 'defaultSpeed', 0);
knee_l = JointDef('translation_parent', [0 -0.396 0]', ...
                 'translation_child', [0 0 0]', ...
                 'Ndof', 1, ...
                 'axis', dofs('knee_flexion_l').axis, ...
                 'range', dofs('knee_flexion_l').range, ...
                 'defaultValue', dofs('knee_flexion_l').defaultValue, ...
                 'defaultSpeed', dofs('knee_flexion_l').defaultSpeed);

% right ankle
dofs('ankle_dorsiflexion_r') = struct('axis', [0 0 1 0]', 'range', deg2rad(90)*[-1 1]', 'defaultValue', 0, 'defaultSpeed', 0);
dofs('ankle_adduction_r') = struct('axis', [0 1 0 0]', 'range', deg2rad(90)*[-1 1]', 'defaultValue', 0, 'defaultSpeed', 0);
ankle_r = JointDef('translation_parent', [0 -0.43 0]', ...
                 'translation_child', [0 0 0]', ...
                 'Ndof', 2, ...
                 'axis', [dofs('ankle_dorsiflexion_r').axis, dofs('ankle_adduction_r').axis], ...
                 'range', [dofs('ankle_dorsiflexion_r').range, dofs('ankle_adduction_r').range], ...
                 'defaultValue', [dofs('ankle_dorsiflexion_r').defaultValue, dofs('ankle_adduction_r').defaultValue], ...
                 'defaultSpeed', [dofs('ankle_dorsiflexion_r').defaultSpeed, dofs('ankle_adduction_r').defaultSpeed]);

% left ankle
dofs('ankle_dorsiflexion_l') = struct('axis', [0 0 1 0]', 'range', deg2rad(90)*[-1 1]', 'defaultValue', 0, 'defaultSpeed', 0);
dofs('ankle_adduction_l') = struct('axis', [0 1 0 0]', 'range', deg2rad(90)*[-1 1]', 'defaultValue', 0, 'defaultSpeed', 0);
ankle_l = JointDef('translation_parent', [0 -0.43 0]', ...
                 'translation_child', [0 0 0]', ...
                 'Ndof', 2, ...
                 'axis', [dofs('ankle_dorsiflexion_l').axis, dofs('ankle_adduction_l').axis], ...
                 'range', [dofs('ankle_dorsiflexion_l').range, dofs('ankle_adduction_l').range], ...
                 'defaultValue', [dofs('ankle_dorsiflexion_l').defaultValue, dofs('ankle_adduction_l').defaultValue], ...
                 'defaultSpeed', [dofs('ankle_dorsiflexion_l').defaultSpeed, dofs('ankle_adduction_l').defaultSpeed]);

% back
dofs('lumbar_extension') = struct('axis', [0 0 1 0]', 'range', deg2rad(90)*[-1 1]', 'defaultValue', 0, 'defaultSpeed', 0);
dofs('lumbar_bending') = struct('axis', [1 0 0 0]', 'range', deg2rad(90)*[-1 1]', 'defaultValue', 0, 'defaultSpeed', 0);
dofs('lumbar_rotation') = struct('axis', [0 1 0 0]', 'range', deg2rad(90)*[-1 1]', 'defaultValue', 0, 'defaultSpeed', 0);
back = JointDef('translation_parent', [-0.1007 0.0815 0]', ...
                 'translation_child', [0 0 0]', ...
                 'Ndof', 3, ...
                 'axis', [dofs('lumbar_extension').axis, dofs('lumbar_bending').axis, dofs('lumbar_rotation').axis], ...
                 'range', [dofs('lumbar_extension').range, dofs('lumbar_bending').range, dofs('lumbar_rotation').range], ...
                 'defaultValue', [dofs('lumbar_extension').defaultValue, dofs('lumbar_bending').defaultValue, dofs('lumbar_rotation').defaultValue], ...
                 'defaultSpeed', [dofs('lumbar_extension').defaultSpeed, dofs('lumbar_bending').defaultSpeed, dofs('lumbar_rotation').defaultSpeed]);

% neck
dofs('neck_extension') = struct('axis', [0 0 1 0]', 'range', deg2rad(90)*[-1 1]', 'defaultValue', 0, 'defaultSpeed', 0);
dofs('neck_bending') = struct('axis', [1 0 0 0]', 'range', deg2rad(90)*[-1 1]', 'defaultValue', 0, 'defaultSpeed', 0);
dofs('neck_rotation') = struct('axis', [0 1 0 0]', 'range', deg2rad(90)*[-1 1]', 'defaultValue', 0, 'defaultSpeed', 0);
back = JointDef('translation_parent', [0 0.4 0]', ...
                 'translation_child', [0 0 0]', ...
                 'Ndof', 3, ...
                 'axis', [dofs('neck_extension').axis, dofs('neck_bending').axis, dofs('neck_rotation').axis], ...
                 'range', [dofs('neck_extension').range, dofs('neck_bending').range, dofs('neck_rotation').range], ...
                 'defaultValue', [dofs('neck_extension').defaultValue, dofs('neck_bending').defaultValue, dofs('neck_rotation').defaultValue], ...
                 'defaultSpeed', [dofs('neck_extension').defaultSpeed, dofs('neck_bending').defaultSpeed, dofs('neck_rotation').defaultSpeed]);

% right shoulder
dofs('arm_flex_r') = struct('axis', [0 0 1 0]', 'range', deg2rad(180)*[-1 1]', 'defaultValue', 0, 'defaultSpeed', 0);
dofs('arm_add_r') = struct('axis', [1 0 0 0]', 'range', deg2rad(90)*[-1 1]', 'defaultValue', 0, 'defaultSpeed', 0);
dofs('arm_rot_r') = struct('axis', [0 1 0 0]', 'range', deg2rad(90)*[-1 1]', 'defaultValue', 0, 'defaultSpeed', 0);
back = JointDef('translation_parent', [0.003155 0.3715 0.17]', ...
                 'translation_child', [0 0 0]', ...
                 'Ndof', 3, ...
                 'axis', [dofs('arm_flex_r').axis, dofs('arm_add_r').axis, dofs('arm_rot_r').axis], ...
                 'range', [dofs('arm_flex_r').range, dofs('arm_add_r').range, dofs('arm_rot_r').range], ...
                 'defaultValue', [dofs('arm_flex_r').defaultValue, dofs('arm_add_r').defaultValue, dofs('arm_rot_r').defaultValue], ...
                 'defaultSpeed', [dofs('arm_flex_r').defaultSpeed, dofs('arm_add_r').defaultSpeed, dofs('arm_rot_r').defaultSpeed]);

% left shoulder
dofs('arm_flex_l') = struct('axis', [0 0 1 0]', 'range', deg2rad(180)*[-1 1]', 'defaultValue', 0, 'defaultSpeed', 0);
dofs('arm_add_l') = struct('axis', [1 0 0 0]', 'range', deg2rad(90)*[-1 1]', 'defaultValue', 0, 'defaultSpeed', 0);
dofs('arm_rot_l') = struct('axis', [0 1 0 0]', 'range', deg2rad(90)*[-1 1]', 'defaultValue', 0, 'defaultSpeed', 0);
back = JointDef('translation_parent', [0.003155 0.3715 -0.17]', ...
                 'translation_child', [0 0 0]', ...
                 'Ndof', 3, ...
                 'axis', [dofs('arm_flex_l').axis, dofs('arm_add_l').axis, dofs('arm_rot_l').axis], ...
                 'range', [dofs('arm_flex_l').range, dofs('arm_add_l').range, dofs('arm_rot_l').range], ...
                 'defaultValue', [dofs('arm_flex_l').defaultValue, dofs('arm_add_l').defaultValue, dofs('arm_rot_l').defaultValue], ...
                 'defaultSpeed', [dofs('arm_flex_l').defaultSpeed, dofs('arm_add_l').defaultSpeed, dofs('arm_rot_l').defaultSpeed]);

% right elbow


% left elbow


% right wrist


% left wrist


%% 